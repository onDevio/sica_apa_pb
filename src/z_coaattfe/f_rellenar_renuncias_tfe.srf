HA$PBExportHeader$f_rellenar_renuncias_tfe.srf
global type f_rellenar_renuncias_tfe from function_object
end type

forward prototypes
global subroutine f_rellenar_renuncias_tfe (string id_fase, string id_fase_alta, string tipo_carta, string destinatarios, integer copias, datawindow colegiados_baja, datawindow colegiados_alta)
end prototypes

global subroutine f_rellenar_renuncias_tfe (string id_fase, string id_fase_alta, string tipo_carta, string destinatarios, integer copias, datawindow colegiados_baja, datawindow colegiados_alta);// FUNCION QUE SE UTILIZARA PARA RELLENAR TODOS LOS DATOS NECESARIOS PARA OBTENER LAS CARTAS DEL AYUNTAMIENTO
// SE HA HECHO COMO FUNCION EXTERNA PARA QUE PUEDA SER LLAMADA DESDE TODOS LOS LUGARES SIEMPRE DE LA MISMA FORMA, AUNQUE
// ESTO CONLLEVE M$$HEX1$$c100$$ENDHEX$$S ACCESOS A BBDD EN CIERTOS CASOS, PERO FACILITA LA ADAPTACI$$HEX1$$d300$$ENDHEX$$N Y UNICIDAD DEL CODIGO
// RICARDO 04-03-23

// Variables para almacenar los datos a colocar en 
string sl_colegio, sl_total_colegiados, sl_cliente, sl_total_clientes, sl_fecha, pobla,sl_num_contrato,sl_archivo, sl_incompatibilidades
string sl_organismos_incompatibilidad, sl_num_coac, sl_arquitectos
// Variables para iterar
long i, cols, itera_incompatible
// Variables temporales para procesar datos
string colegiado, id_col, id_fases_col, n_col, apell, nomb, nif, daf, paf, organismo, apellidos_arq
string descripcion, obs, t_via, nomvia,numero,des_via, emplazamiento, poblacion
datetime ldtt_hoy, f_ini, f_fin
date ldt_hoy
int pos_espacio
long n_inc

string seleccionado
string sl_total_colegiados_baja
string sl_num_contrato_alta,sl_archivo_alta
// Solo se crer$$HEX2$$e1002000$$ENDHEX$$este datastore si es necesario
datastore ds_colegiados_incompatibilidades_tfe

sl_colegio= g_nombre_colegio_carta

// Creamos el datastore a imprimir
datastore ds_imprime_hoja
ds_imprime_hoja = create datastore
ds_imprime_hoja.dataobject = 'd_renuncias_carta'
ds_imprime_hoja.settransobject(sqlca)
ds_imprime_hoja.insertrow(0)

// Construimos la fecha que aparecer$$HEX2$$e1002000$$ENDHEX$$en el escrito
ldtt_hoy =datetime(today(),now())
ldt_hoy  = today()
sl_fecha = ' En '+Upper( g_col_ciudad + ', ' + string(day(ldt_hoy)) + ' de ' + lower(f_obtener_mes (ldtt_hoy)) + ' de ' + string(year(ldt_hoy)))

// MODIFICADO POR RICARDO 2004-08-12 -> BLANCA DE TFE HA PEDIDO QUE LOS DATOS SE SAQUEN DEL NUEVO CONTRA
// Colocamos la parte de descripcion y dem$$HEX1$$e100$$ENDHEX$$s de la obra (contrato)
SELECT n_registro, archivo, descripcion, observaciones, tipo_via_emplazamiento, emplazamiento, n_calle, poblacion, num_coac
into :sl_num_contrato_alta, :sl_archivo_alta, :descripcion, :obs, :t_via, :nomvia,:numero, :poblacion, :sl_num_coac
from fases where id_fase = :id_fase_alta;

// Colocamos la parte de descripcion y dem$$HEX1$$e100$$ENDHEX$$s de la obra (contrato)->Antes estaba con el nuevo contrato, ahora es lo del viejo
SELECT n_registro, archivo
into :sl_num_contrato, :sl_archivo
from fases where id_fase = :id_fase;
// FIN MODIFICADO POR RICARDO 2004-08-12  

//Introducimos los datos de los colegiados que se dan de alta

sl_total_colegiados =''
sl_incompatibilidades = 'N'
sl_organismos_incompatibilidad = ''
for i = 1 to colegiados_alta.rowcount()
	colegiado = ''
	id_col = colegiados_alta.getitemstring(i,"colegiados_id_colegiado")
	seleccionado = colegiados_alta.getitemstring(i,"renunciado")
	id_fases_col = colegiados_alta.getitemstring(i, 'fases_colegiados_id_fases_colegiados')

if seleccionado = 'S' then
	if f_colegiado_tipopersona(id_col) <> 'S' then
		select n_colegiado,apellidos,nombre,nif,domicilio_activo,poblacion_activa 
			into :n_col, :apell, :nomb, :nif, :daf, :paf
			from colegiados where id_colegiado=:id_col;
		
		// Colocamos los datos tal como tienen que salir, todo seguido y separando con comas entre colegiados
		if f_es_vacio(nomb) then colegiado = apell else colegiado = nomb +	' ' + apell
		if not f_es_vacio(n_col) then colegiado += ' (N$$HEX1$$ba00$$ENDHEX$$. colegiado: ' + n_col +') '
		if not f_es_vacio(nif) then colegiado += ' con N.I.F. ' +  nif
		colegiado += ' y domicilio en '
		if not f_es_vacio(daf) then colegiado += daf
		if not f_es_vacio(paf) then 
			pos_espacio = PosA(paf, ' ', 1)
			colegiado += MidA(paf, pos_espacio, LenA(paf))
		end if
		if not f_es_vacio(paf) then colegiado += ' (C.P..: ' + MidA(paf, 1, 5)+ ') '
		
		// Averiguamos las incompatibilidades
		f_fin = datetime(relativedate(today(), -1), time("00:00"))
		f_ini = datetime(relativedate(today(), 1), time("00:00"))
		// contamos las incompatibilidades que comienzan antes de ma$$HEX1$$f100$$ENDHEX$$ana y terminan despues de ayer. Es complicado entenderlo pero es lo mejor
	   SELECT count(*) into :n_inc FROM incompatibilidades  WHERE incompatibilidades.id_colegiado = :id_col and fecha_inicio < :f_fin and  fecha_fin >:f_ini;  		
		CHOOSE CASE n_inc
			CASE 0
				// no  hay que hacer nada porque no tiene incompatibilidades
			CASE 1
				// Solo hay 1 pillamos el nombre
				sl_incompatibilidades = 'S'
			   SELECT organismo into :organismo FROM incompatibilidades  WHERE incompatibilidades.id_colegiado = :id_col and fecha_inicio < :f_fin and  fecha_fin >:f_ini;  		
				if not f_es_vacio(organismo) then 
					if LenA (sl_organismos_incompatibilidad )>0 then sl_organismos_incompatibilidad += ', '
					sl_organismos_incompatibilidad += organismo
				end if
			CASE is >1
				// tendremos que recurrir al datastore
				sl_incompatibilidades = 'S'
				if not isvalid(ds_colegiados_incompatibilidades_tfe) then
					ds_colegiados_incompatibilidades_tfe = create datastore
					ds_colegiados_incompatibilidades_tfe.dataobject = 'd_colegiados_incompatibilidades_tfe'
					ds_colegiados_incompatibilidades_tfe.Settransobject(SQLCA)
				end if
				// Retriveamos las incompatibilidades para este colegiado
				ds_colegiados_incompatibilidades_tfe.retrieve(id_col, f_ini, f_fin)
				FOR itera_incompatible = 1 TO ds_colegiados_incompatibilidades_tfe.RowCount()
					organismo = ds_colegiados_incompatibilidades_tfe.GetItemString(itera_incompatible, 'organismo')
					if not f_es_vacio(organismo) then 
						if LenA (sl_organismos_incompatibilidad )>0 then sl_organismos_incompatibilidad += ', '
						sl_organismos_incompatibilidad += organismo
					end if
				NEXT
		END CHOOSE
	else
		// Creamos un dastastore para obtener todos los colegiados de esa sociedad
		datastore ds_cols_soc
		ds_cols_soc = create datastore
		ds_cols_soc.dataobject = 'ds_fases_colegiados_asociados'
		ds_cols_soc.settransobject(sqlca)
		ds_cols_soc.retrieve(id_fases_col)

		// Deben aparecer s$$HEX1$$f300$$ENDHEX$$lo los colegiados que tengan porcentaje mayor de cero (Seg$$HEX1$$fa00$$ENDHEX$$n email del 28/05/2007)
		ds_cols_soc.setfilter("porcent > 0")
		ds_cols_soc.filter()

		colegiado = ''
		for cols = 1 to ds_cols_soc.rowcount()
			id_col = ds_cols_soc.getitemstring(cols,"id_col_per")
			select n_colegiado,apellidos,nombre,nif,domicilio_activo,poblacion_activa 
				into :n_col, :apell, :nomb, :nif, :daf, :paf
				from colegiados where id_colegiado=:id_col;
			
			// Colocamos los datos tal como tienen que salir, todo seguido y separando con comas entre colegiados
			if LenA(colegiado)>0 then colegiado += ', ' 
			if f_es_vacio(nomb) then colegiado += apell else colegiado += nomb +	' ' + apell
			if not f_es_vacio(n_col) then colegiado += ' (N$$HEX1$$ba00$$ENDHEX$$. colegiado: ' + n_col +') '
			if not f_es_vacio(nif) then colegiado += ' con N.I.F. ' +  nif
			colegiado += ' y domicilio en '
			if not f_es_vacio(daf) then colegiado += daf
			if not f_es_vacio(paf) then 
				pos_espacio = PosA(paf, ' ', 1)
				colegiado += MidA(paf, pos_espacio, LenA(paf))
			end if
			if not f_es_vacio(paf) then colegiado += ' (C.P..: ' + MidA(paf, 1, 5)+ ') '
			
			// Averiguamos las incompatibilidades
			f_fin = datetime(relativedate(today(), -1), time("00:00"))
			f_ini = datetime(relativedate(today(), 1), time("00:00"))
			// contamos las incompatibilidades que comienzan antes de ma$$HEX1$$f100$$ENDHEX$$ana y terminan despues de ayer. Es complicado entenderlo pero es lo mejor
			SELECT count(*) into :n_inc FROM incompatibilidades  WHERE incompatibilidades.id_colegiado = :id_col and fecha_inicio < :f_fin and  fecha_fin >:f_ini;  		
			CHOOSE CASE n_inc
				CASE 0


					// no  hay que hacer nada porque no tiene incompatibilidades
				CASE 1
					// Solo hay 1 pillamos el nombre
					sl_incompatibilidades = 'S'
					SELECT organismo into :organismo FROM incompatibilidades  WHERE incompatibilidades.id_colegiado = :id_col and fecha_inicio < :f_fin and  fecha_fin >:f_ini;  		
					if not f_es_vacio(organismo) then 
						if LenA (sl_organismos_incompatibilidad )>0 then sl_organismos_incompatibilidad += ', '
						sl_organismos_incompatibilidad += organismo
					end if
				CASE is >1
					// tendremos que recurrir al datastore
					sl_incompatibilidades = 'S'
					if not isvalid(ds_colegiados_incompatibilidades_tfe) then
						ds_colegiados_incompatibilidades_tfe = create datastore
						ds_colegiados_incompatibilidades_tfe.dataobject = 'd_colegiados_incompatibilidades_tfe'
						ds_colegiados_incompatibilidades_tfe.Settransobject(SQLCA)
					end if
					// Retriveamos las incompatibilidades para este colegiado
					ds_colegiados_incompatibilidades_tfe.retrieve(id_col, f_ini, f_fin)
					FOR itera_incompatible = 1 TO ds_colegiados_incompatibilidades_tfe.RowCount()
						organismo = ds_colegiados_incompatibilidades_tfe.GetItemString(itera_incompatible, 'organismo')
						if not f_es_vacio(organismo) then 
							if LenA (sl_organismos_incompatibilidad )>0 then sl_organismos_incompatibilidad += ', '
							sl_organismos_incompatibilidad += organismo
						end if
					NEXT
			END CHOOSE
		next
		// Destruimos el datastore creado
		destroy ds_cols_soc
	end if
	if LenA(sl_total_colegiados)>0 then sl_total_colegiados += ', ' else sl_total_colegiados = ' - Don/Do$$HEX1$$f100$$ENDHEX$$a  '
	sl_total_colegiados += colegiado
end if
next

//Introducimos los datos de los colegiados que se dan de baja

sl_total_colegiados_baja =''
sl_incompatibilidades = 'N'
sl_organismos_incompatibilidad = ''

for i = 1 to colegiados_baja.rowcount()
	colegiado = ''
	id_col = colegiados_baja.getitemstring(i,"colegiados_id_colegiado")
	seleccionado = colegiados_baja.getitemstring(i,"renunciado")
	id_fases_col = colegiados_baja.getitemstring(i, 'fases_colegiados_id_fases_colegiados')

if seleccionado = 'S' then
	if f_colegiado_tipopersona(id_col) <> 'S' then
		select n_colegiado,apellidos,nombre,nif,domicilio_activo,poblacion_activa 
			into :n_col, :apell, :nomb, :nif, :daf, :paf
			from colegiados where id_colegiado=:id_col;
		
		// Colocamos los datos tal como tienen que salir, todo seguido y separando con comas entre colegiados
		if f_es_vacio(nomb) then colegiado = apell else colegiado = nomb +	' ' + apell
		if not f_es_vacio(n_col) then colegiado += ' (N$$HEX1$$ba00$$ENDHEX$$. colegiado: ' + n_col +') '
		if not f_es_vacio(nif) then colegiado += ' con N.I.F. ' +  nif
		colegiado += ' y domicilio en '
		if not f_es_vacio(daf) then colegiado += daf
		if not f_es_vacio(paf) then 
			pos_espacio = PosA(paf, ' ', 1)
			colegiado += MidA(paf, pos_espacio, LenA(paf))
		end if
		if not f_es_vacio(paf) then colegiado += ' (C.P..: ' + MidA(paf, 1, 5)+ ') '
	else
		// Creamos un dastastore para obtener todos los colegiados de esa sociedad
		ds_cols_soc = create datastore
		ds_cols_soc.dataobject = 'ds_fases_colegiados_asociados'
		ds_cols_soc.settransobject(sqlca)
		ds_cols_soc.retrieve(id_fases_col)
		ds_cols_soc.retrieve(id_fases_col)
		
		colegiado = ''
		for cols = 1 to ds_cols_soc.rowcount()
			id_col = ds_cols_soc.getitemstring(cols,"id_col_per")
			select n_colegiado,apellidos,nombre,nif,domicilio_activo,poblacion_activa 
				into :n_col, :apell, :nomb, :nif, :daf, :paf
				from colegiados where id_colegiado=:id_col;
			
			// Colocamos los datos tal como tienen que salir, todo seguido y separando con comas entre colegiados
			if LenA(colegiado)>0 then colegiado += ', ' 
			if f_es_vacio(nomb) then colegiado += apell else colegiado += nomb +	' ' + apell
			if not f_es_vacio(n_col) then colegiado += ' (N$$HEX1$$ba00$$ENDHEX$$. colegiado: ' + n_col +') '
			if not f_es_vacio(nif) then colegiado += ' con N.I.F. ' +  nif
			colegiado += ' y domicilio en '
			if not f_es_vacio(daf) then colegiado += daf
			if not f_es_vacio(paf) then 
				pos_espacio = PosA(paf, ' ', 1)
				colegiado += MidA(paf, pos_espacio, LenA(paf))
			end if
			if not f_es_vacio(paf) then colegiado += ' (C.P..: ' + MidA(paf, 1, 5)+ ') '
		next
		// Destruimos el datastore creado
		destroy ds_cols_soc
	end if
	if LenA(sl_total_colegiados_baja)>0 then sl_total_colegiados_baja += ', ' else sl_total_colegiados_baja = ' - Don/Do$$HEX1$$f100$$ENDHEX$$a  '
	sl_total_colegiados_baja += colegiado
end if
next

// Destruimos el datastore de imcomptabilidades solo si lo hemos creado
if isvalid(ds_colegiados_incompatibilidades_tfe) then destroy ds_colegiados_incompatibilidades_tfe

// Miramos si hay incomatibilidades y no hay ninguna descripcion
if sl_incompatibilidades = 'S' and LenA(sl_organismos_incompatibilidad) = 0 then sl_organismos_incompatibilidad = ' DESCONOCIDO '


// Hay que hacer el recorrido de los clientes buscando los promotores
datastore ds_fases_promotores
ds_fases_promotores = create datastore
ds_fases_promotores.dataobject = 'd_fases_promotores'
ds_fases_promotores.SetTransObject(SQLCA)

ds_fases_promotores.retrieve(id_fase_alta) // Modificado Ricardo 2004-08-12

for i = 1 to ds_fases_promotores.RowCount()
	if ds_fases_promotores.getitemstring(i,"promotor") = 'S' then 
		sl_cliente = ''
		string id_representante
		id_representante = ds_fases_promotores.getitemstring(i,"id_representante")
		if not f_es_vacio(id_representante) then
			sl_cliente = f_dame_cliente ( id_representante )
			nif = ds_fases_promotores.getitemstring(i,"nif_representante")
			if not f_es_vacio(nif) then sl_cliente += ' con N.I.F.  ' + nif 
			sl_cliente += " en representaci$$HEX1$$f300$$ENDHEX$$n de "
		end if		
		
		
		string id_cliente
		id_cliente = ds_fases_promotores.getitemstring(i,"id_cliente")
		sl_cliente += f_dame_cliente ( id_cliente )
		nif = ds_fases_promotores.getitemstring(i,"nif")
		 
		// nombre    N.I.F.: nif_cliente
		// Domicilio.: domicilio_cliente
		// Poblaci$$HEX1$$f300$$ENDHEX$$n.: poblacion_cliente
		if LenA(sl_total_clientes) = 0 then sl_total_clientes = "Sr.  "
		sl_total_clientes += sl_cliente
		if not f_es_vacio(nif) then sl_total_clientes += nif
		sl_total_clientes += cr + 'Domicilio.: ' + f_dame_domicilio(id_cliente)
		sl_total_clientes += cr + 'Poblaci$$HEX1$$f300$$ENDHEX$$n.: ' + f_retorna_poblacion (id_cliente)
		sl_total_clientes += cr 		
	end if
next

// Destruimos el datastore
destroy ds_fases_promotores

// Obtenemos los arquitectos participantes en la obra
datastore ds_fases_arquitectos
ds_fases_arquitectos = create datastore
ds_fases_arquitectos.dataobject = 'd_fases_arquitectos'
ds_fases_arquitectos.settransobject (SQLCA)
ds_fases_arquitectos.retrieve(id_fase_alta) //MODIFICADO RICARDO 2004-08-12

// REcorremos los arquitectos del contrato
sl_arquitectos=''
FOR i = 1 TO ds_fases_arquitectos.RowCount()
	if ds_fases_arquitectos.GetItemString(i, 'tipo_a')='S' then
		apellidos_arq = ds_fases_arquitectos.GetItemString(i, 'apellidos')
		if not f_es_vacio(ds_fases_arquitectos.GetItemString(i, 'nombre')) then apellidos_arq += ', '+ds_fases_arquitectos.GetItemString(i, 'nombre')
		if LenA(sl_arquitectos)=0 then  sl_arquitectos += "Sr./s "
		sl_arquitectos += apellidos_arq +cr
	end if
NEXT
// Destruimos el datastore
//destroy ds_fases_arquitectos


// Obtenemos la descritpcion del tipo de via
des_via = f_dame_desc_tipo_via(t_via)

// Construimos la direccion
emplazamiento = ''
if not f_es_vacio(des_via) then emplazamiento += des_via +" "
if not f_es_vacio(nomvia) then emplazamiento += nomvia +" "
if not f_es_vacio(numero) then emplazamiento += numero +" "
// Obtenemos la descripcion de la poblacion
pobla = f_poblacion_descripcion(poblacion)

// Colocamos los datos obtenidos en el datastore para su impresion
ds_imprime_hoja.setitem(1,"n_contrato",sl_num_contrato)
ds_imprime_hoja.setitem(1,"archivo",sl_archivo)
ds_imprime_hoja.setitem(1,"n_contrato_alta",sl_num_contrato_alta)
ds_imprime_hoja.setitem(1,"archivo_alta",sl_archivo_alta)
ds_imprime_hoja.setitem(1,"colegiado_alta",sl_total_colegiados)
ds_imprime_hoja.setitem(1,"colegiado_baja",sl_total_colegiados_baja)
ds_imprime_hoja.setitem(1,"cliente",sl_total_clientes)  
ds_imprime_hoja.setitem(1,"emplazamiento",emplazamiento)  
ds_imprime_hoja.setitem(1,"descripcion",descripcion)
ds_imprime_hoja.setitem(1,"alcalde",pobla)
ds_imprime_hoja.setitem(1,"fecha",sl_fecha)
ds_imprime_hoja.setitem(1,"localidad",pobla)
ds_imprime_hoja.setitem(1,"incompatibilidades", sl_incompatibilidades)
ds_imprime_hoja.setitem(1,"organismos_incompatibilidad", sl_organismos_incompatibilidad)
ds_imprime_hoja.setitem(1,"arquitectos", sl_arquitectos)
ds_imprime_hoja.setitem(1,"num_coac", sl_num_coac)



// Otros datos que podriamos colocar si fuese necesario
//ds_imprime_hoja.setitem(1,"tipo_obra",sl_des_tipo_obra)
//ds_imprime_hoja.setitem(1,"uso_obra",sl_des_uso_obra)
//ds_imprime_hoja.setitem(1,"tipo_actuacion",sl_des_tipo_act)
//ds_imprime_hoja.setitem(1,"num_viviendas",string(viviendas,'#,##0'))
//ds_imprime_hoja.setitem(1,"sup_vivienda",string(dl_sup_viviendas,'#,##0.00'))
//ds_imprime_hoja.setitem(1,"otros_usos", string(dl_sup_otros,'#,##0.00'))
//ds_imprime_hoja.setitem(1,"sub_garajes",string(dl_sup_garaje,'#,##0.00'))
//ds_imprime_hoja.setitem(1,"fecha_visado",sl_f_visado)

CHOOSE CASE tipo_carta
	CASE 'D'
		CHOOSE CASE destinatarios
			CASE 'AYUNTAMIENTO'
			// Imprimimos la hoja al alcalde
			ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			CASE 'CONSEJERIA'
			// Imprimimos la hoja a la conseJeria
			ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			CASE 'ARQUITECTOS'
			// Imprimimos la hoja a los arquitectos (una por arquitecto autor)
			FOR i = 1 TO ds_fases_arquitectos.RowCount()
				if ds_fases_arquitectos.GetItemString(i, 'tipo_a')='S' then
					apellidos_arq = ds_fases_arquitectos.GetItemString(i, 'apellidos')
					if not f_es_vacio(ds_fases_arquitectos.GetItemString(i, 'nombre')) then apellidos_arq += ', '+ds_fases_arquitectos.GetItemString(i, 'nombre')
					sl_arquitectos = "Sr./s "  + apellidos_arq
					ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
					ds_imprime_hoja.object.texto_arquitectos_t.text = sl_arquitectos
					for i = 1 TO copias
						ds_imprime_hoja.print()
					next
				end if
			NEXT		
			CASE 'COAC'
			// Imprimimos la hoja al colegio de arquitectos
			ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			CASE 'TODAS'
			// Imprimimos todas
			ds_imprime_hoja.setitem(1,"destinatario",'AYUNTAMIENTO')	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			// No sacar esta carta (Seg$$HEX1$$fa00$$ENDHEX$$n email 25/05/2007)
//			ds_imprime_hoja.setitem(1,"destinatario",'CONSEJERIA')	
//			for i = 1 TO copias
//				ds_imprime_hoja.print()
//			next
			// Imprimimos la hoja a los arquitectos (una por arquitecto autor)
			FOR i = 1 TO ds_fases_arquitectos.RowCount()
				if ds_fases_arquitectos.GetItemString(i, 'tipo_a')='S' then
					apellidos_arq = ds_fases_arquitectos.GetItemString(i, 'apellidos')
					if not f_es_vacio(ds_fases_arquitectos.GetItemString(i, 'nombre')) then apellidos_arq += ', '+ds_fases_arquitectos.GetItemString(i, 'nombre')
					sl_arquitectos = "Sr./s "  + apellidos_arq
					ds_imprime_hoja.setitem(1,"destinatario",'ARQUITECTOS')	
					ds_imprime_hoja.object.texto_arquitectos_t.text = sl_arquitectos
					for i = 1 TO copias
						ds_imprime_hoja.print()
					next
				end if
			NEXT		
			ds_imprime_hoja.setitem(1,"destinatario",'COAC')	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
		END CHOOSE
	CASE 'C'
		CHOOSE CASE destinatarios
			CASE 'AYUNTAMIENTO'
			// Imprimimos la hoja al alcalde
			ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			CASE 'CONSEJERIA'
			// Imprimimos la hoja a la conseJeria
			ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next	
			CASE 'ARQUITECTOS'
			// Imprimimos la hoja a los arquitectos (una por arquitecto autor)
			FOR i = 1 TO ds_fases_arquitectos.RowCount()
				if ds_fases_arquitectos.GetItemString(i, 'tipo_a')='S' then
					apellidos_arq = ds_fases_arquitectos.GetItemString(i, 'apellidos')
					if not f_es_vacio(ds_fases_arquitectos.GetItemString(i, 'nombre')) then apellidos_arq += ', '+ds_fases_arquitectos.GetItemString(i, 'nombre')
					sl_arquitectos = "Sr./s "  + apellidos_arq
					ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
					ds_imprime_hoja.object.texto_arquitectos_t.text = sl_arquitectos
					for i = 1 TO copias
						ds_imprime_hoja.print()
					next
				end if
			NEXT		
			CASE 'COAC'
			// Imprimimos la hoja al colegio de arquitectos
			ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			CASE 'MINISTERIO'
			// Imprimimos la hoja al colegio de arquitectos
			ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			CASE 'GABINETE SSL'
			// Imprimimos la hoja al colegio de arquitectos
			ds_imprime_hoja.setitem(1,"destinatario",destinatarios)	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			CASE 'TODAS'
			// Imprimimos todas
			ds_imprime_hoja.setitem(1,"destinatario",'AYUNTAMIENTO')	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			// No sacar esta carta (Seg$$HEX1$$fa00$$ENDHEX$$n email 25/05/2007)
//			ds_imprime_hoja.setitem(1,"destinatario",'CONSEJERIA')	
//			for i = 1 TO copias
//				ds_imprime_hoja.print()
//			next
			// Imprimimos la hoja a los arquitectos (una por arquitecto autor)
			FOR i = 1 TO ds_fases_arquitectos.RowCount()
				if ds_fases_arquitectos.GetItemString(i, 'tipo_a')='S' then
					apellidos_arq = ds_fases_arquitectos.GetItemString(i, 'apellidos')
					if not f_es_vacio(ds_fases_arquitectos.GetItemString(i, 'nombre')) then apellidos_arq += ', '+ds_fases_arquitectos.GetItemString(i, 'nombre')
					sl_arquitectos = "Sr./s "  + apellidos_arq
					ds_imprime_hoja.setitem(1,"destinatario",'ARQUITECTOS')	
					ds_imprime_hoja.object.texto_arquitectos_t.text = sl_arquitectos
					for i = 1 TO copias
						ds_imprime_hoja.print()
					next
				end if
			NEXT		
			ds_imprime_hoja.setitem(1,"destinatario",'COAC')	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
			// Imprimimos la hoja al colegio de arquitectos
			ds_imprime_hoja.setitem(1,"destinatario",'MINISTERIO')	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next 
			// Imprimimos la hoja al colegio de arquitectos
			ds_imprime_hoja.setitem(1,"destinatario",'GABINETE SSL')	
			for i = 1 TO copias
				ds_imprime_hoja.print()
			next
		END CHOOSE		
END CHOOSE
// Destruimos el datastore que habiamos mantenido para la impresion
destroy ds_fases_arquitectos



// Destruimos el datastore
destroy ds_imprime_hoja
end subroutine

